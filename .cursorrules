# Maverick Mapper Project Rules

# Test-Driven Development
rule "Write tests first" {
    description = "Tests must be written before implementing the feature code"
    severity = "error"
}

rule "Test coverage" {
    description = "Each new feature must have corresponding test cases"
    pattern = "_test\\.dart$"
    severity = "error"
}

rule "Mock dependencies" {
    description = "Use mocks for external dependencies in tests"
    pattern = "Mock|FakeMock"
    severity = "warning"
}

rule "Test isolation" {
    description = "Tests should be independent and not rely on other tests' state"
    severity = "error"
}

# Package Management
rule "Use well-maintained packages" {
    description = "Utilize existing, popular, well-maintained packages for implementation"
    severity = "warning"
}

rule "Package versioning" {
    description = "All packages must specify version constraints in pubspec.yaml"
    pattern = "^\\d+\\.\\d+\\.\\d+$"
    severity = "error"
}

rule "Package documentation" {
    description = "Document why each major package is being used in the README.md"
    severity = "warning"
}

rule "Avoid duplicate packages" {
    description = "Avoid packages that duplicate functionality of existing dependencies"
    severity = "warning"
}

rule "Package stability" {
    description = "Use only stable versions of packages (avoid beta/alpha versions)"
    pattern = "beta|alpha|dev"
    severity = "error"
}

# State Management
rule "Use Riverpod for state" {
    description = "State management must be implemented using Riverpod"
    pattern = "import 'package:riverpod"
    severity = "error"
}

# Code Organization
rule "Modular design" {
    description = "Code should be modular and standalone for future replacement"
    severity = "warning"
}

# API Integration
rule "API validation" {
    description = "Ensure proper error handling for API connections"
    pattern = "try|catch"
    severity = "error"
}

# Data Validation
rule "Required fields validation" {
    description = "Validate required fields before export operations"
    severity = "error"
}

rule "JSON format validation" {
    description = "Validate JSON format during input operations"
    severity = "error"
}

# Documentation
rule "Document changes" {
    description = "Major function changes must be documented in ai/changes.md"
    severity = "warning"
}

rule "README maintenance" {
    description = "README must be kept up to date with beginner-friendly setup and usage instructions"
    severity = "error"
}

# Testing
rule "JSONata format compliance" {
    description = "Ensure exports follow JSONata format specifications"
    severity = "error"
}

# UI Components
rule "Drag-and-drop implementation" {
    description = "UI must implement drag-and-drop functionality for field mapping"
    severity = "error"
}

# Performance
rule "MVP scope" {
    description = "Avoid implementing unnecessary features beyond MVP scope unless specified in my instructions"
    severity = "warning"
}

# File Structure
rule "Test location" {
    description = "Test files should be located next to the implementation files"
    pattern = "^test/.+_test\\.dart$"
    severity = "warning"
}

rule "Screen location" {
    description = "New screen implementations should be in lib/screens/"
    pattern = "^lib/screens/.+\\.dart$"
    severity = "warning"
}

rule "Widget components" {
    description = "Reusable widgets should be in lib/widgets/"
    pattern = "^lib/widgets/.+\\.dart$"
    severity = "warning"
}

rule "Services" {
    description = "API and business logic services should be in lib/services/"
    pattern = "^lib/services/.+\\.dart$"
    severity = "warning"
}

# Documentation and Comments
rule "Class documentation" {
    description = "Each class must have a detailed doc comment explaining its purpose and usage for beginners"
    pattern = "/// "
    severity = "error"
}

rule "Method documentation" {
    description = "Each method must have a doc comment explaining what it does, its parameters, and return value"
    pattern = "/// "
    severity = "error"
}

rule "Complex logic comments" {
    description = "Complex logic sections must have inline comments explaining the steps for beginners"
    pattern = "// "
    severity = "warning"
}

rule "Example usage" {
    description = "Public APIs and widgets should include example usage in their documentation"
    pattern = "/// Example:"
    severity = "warning"
} 