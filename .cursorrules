{
    "Reusable Components": {
      "Description": "Break the entire project into reusable components.",
      "Steps": [
        "Review the existing codebase to identify reusable components.",
        "Create new reusable components where necessary.",
        "Ensure all components align with the app's overall design language, prioritizing consistency."
      ]
    },
    "Component-Driven Workflow": {
      "Description": "Follow a structured workflow to build and integrate components.",
      "Steps": [
        "Identify and plan all reusable components needed before writing code.",
        "Build each component individually and validate with tests.",
        "Use completed components to assemble the screens.",
        "Write and validate tests for the assembled screens.",
        "Stitch the screens together into the full experience and validate with integration tests."
      ]
    },
    "Branch and PR Management": {
      "Description": "Maintain clean, specific, and manageable branches and pull requests.",
      "Steps": [
        "Keep branches and pull requests limited to around 500 lines of code.",
        "Ensure each branch and PR is focused on a single feature or task.",
        "For reusable components, create individual PRs when necessary based on their complexity.",
        "Favor many smaller, specific PRs over one large PR for better reviewability and integration."
      ]
    },
    "Mock Data and API Constraints": {
      "Description": "Follow guidelines for handling mock data and API layer restrictions.",
      "Steps": [
        "Use 'data.dart' files for mock data and avoid touching any API layer or database functionality.",
        "Do not modify or create functionality outside the mock data context."
      ]
    },
    "Folder Structure": {
      "Description": "Organize project files in a clear and consistent folder structure.",
      "Steps": [
        "Store models, data, services, widgets, screens, mocks, and tests in their respective folders under 'lib'.",
        "For tests, create corresponding folders under 'test' to match the structure in 'lib'.",
        "Where a feature or significant screen is large enough, consider creating its own subfolder within the appropriate category (e.g., 'screens', 'widgets').",
        "Ensure all files and subfolders follow a naming convention consistent with the existing codebase."
      ]
    },
    "Documentation": {
      "Description": "Document progress at each step in the development process.",
      "Steps": [
        "Update the changelog file located at 'ai/changelog.md' with completed items.",
        "If working on a speciifc feature where you are using a specs file, name the file as 'ai/-<feature-name>-changelog.md'.",
        "List completed items in top-to-bottom order.",
        "Include a summary overview at the top of the changelog for pull request comments.",
        "if working from a specs file, ensure that the specs file is updated with the completed items."
      ]
    },
    "Testing and Validation": {
      "Description": "Ensure the application is robust and handles edge cases.",
      "Steps": [
        "Test the flow for edge cases, such as missing OAuth permissions or provider downtime.",
        "Use mock data during development to simulate various scenarios."
      ]
    }
  }
  